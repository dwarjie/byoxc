# Output Monitoring

Compiled in this file, the different tries I did with specific topic and difficulty.

## 1st Prompt
{
    "id": "chatcmpl-Bz1iDdlZ912u9V9dnlJPhPgOGPgx6",
    "object": "chat.completion",
    "created": 1753884289,
    "model": "o4-mini-2025-04-16",
    "choices": [
        {
            "index": 0,
            "message": {
            "role": "assistant",
            "content": <see bottom result>
            "refusal": null,
            "annotations": []
        },
        "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1204,
        "completion_tokens": 2745,
        "total_tokens": 3949,
        "prompt_tokens_details": {
        "cached_tokens": 0,
        "audio_tokens": 0
    },
    "completion_tokens_details": {
        "reasoning_tokens": 1152,
        "audio_tokens": 0,
        "accepted_prediction_tokens": 0,
        "rejected_prediction_tokens": 0
        }
    },
    "service_tier": "default",
    "system_fingerprint": null
}

### Output Course
"{
  "title": "HTTP Server with Python (Beginner)",
  "chapters": [
    {
      "title": "Introduction to Python’s Built-in HTTP Server",
      "description": "Learn how to start a minimal HTTP server using Python’s http.server module and understand basic HTTP concepts.",
      "body": "In this chapter, you will learn how to use Python's built-in http.server module to quickly start an HTTP server.\n\n1. Open your terminal or command prompt.\n2. Verify Python 3 is installed: run `python3 --version` (or `python --version`).\n3. Navigate to any directory that contains some files (HTML, images, etc.).\n4. Start the server: `python3 -m http.server 8000`.\n5. Open your browser and go to `http://localhost:8000` to see the directory listing and files.\n6. To stop the server, press `Ctrl+C` in the terminal.\n\nThis demonstrates how easy it is to serve static files with just one command.",
      "exercises": [
        "Start the server on port 9000 and verify you can browse files.",
        "Navigate to a different folder and serve its contents.",
        "Try accessing a non-existent file and observe the 404 error.",
        "Stop and restart the server using different ports."
      ],
      "resources": [
        {
          "title": "Python http.server Documentation",
          "link": "https://docs.python.org/3/library/http.server.html"
        },
        {
          "title": "MDN Web Docs – HTTP Overview",
          "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview"
        }
      ]
    },
    {
      "title": "Serving Custom Static Content",
      "description": "Organize your files and serve a simple HTML page, CSS, and images using the built-in server.",
      "body": "In this chapter, you will create a small website folder and serve its contents.\n\n1. In your project folder, create subfolder `site`.\n2. Inside `site`, create `index.html` with basic HTML boilerplate and a heading.\n3. Add a CSS file `styles.css` and reference it from `index.html`.\n4. Place an image file `logo.png` in the same folder.\n5. From the parent directory, run `python3 -m http.server 8000`.\n6. Open `http://localhost:8000/site/` and verify your HTML, CSS, and image load correctly.\n\nYou now have a simple static website served by Python.",
      "exercises": [
        "Add a second HTML page and link to it from `index.html`.",
        "Create a subdirectory `assets` and serve JavaScript files.",
        "Experiment with relative and absolute URLs in your pages.",
        "Modify CSS to change the page layout and refresh to see updates."
      ],
      "resources": [
        {
          "title": "W3Schools – HTML Tutorial",
          "link": "https://www.w3schools.com/html/"
        },
        {
          "title": "W3Schools – CSS Tutorial",
          "link": "https://www.w3schools.com/css/"
        }
      ]
    },
    {
      "title": "Building a Custom Request Handler",
      "description": "Learn to write a Python script using BaseHTTPRequestHandler to return dynamic responses instead of static files.",
      "body": "In this chapter, you'll write your own HTTP server script.\n\n1. Create a new file `custom_server.py`.\n2. Import the required classes:\n   ```python\n   from http.server import HTTPServer, BaseHTTPRequestHandler\n   ```\n3. Define a handler class:\n   ```python\n   class SimpleHandler(BaseHTTPRequestHandler):\n       def do_GET(self):\n           self.send_response(200)\n           self.send_header('Content-type', 'text/plain')\n           self.end_headers()\n           self.wfile.write(b'Hello, World!')\n   ```\n4. Set up and start the server:\n   ```python\n   if __name__ == '__main__':\n       server = HTTPServer(('localhost', 8000), SimpleHandler)\n       print('Server running on http://localhost:8000')\n       server.serve_forever()\n   ```\n5. Run `python3 custom_server.py` and visit `http://localhost:8000`.\n\nYou're now returning a custom plain-text response for every GET request.",
      "exercises": [
        "Change the response to return HTML instead of plain text.",
        "Add custom headers (e.g., `X-Custom-Header`).",
        "Log each request path to the console.",
        "Handle a POST request by overriding `do_POST` and returning a confirmation."
      ],
      "resources": [
        {
          "title": "BaseHTTPRequestHandler Class Reference",
          "link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler"
        },
        {
          "title": "Python HTTPServer Example",
          "link": "https://realpython.com/python-http-server/"
        }
      ]
    },
    {
      "title": "Routing and Dynamic Content",
      "description": "Implement simple routing logic and return different content based on the request path, including current date and time.",
      "body": "In this chapter, you'll extend your handler to support multiple routes.\n\n1. In `custom_server.py`, import `datetime`:\n   ```python\n   import datetime\n   ```\n2. Modify `do_GET` to inspect `self.path`:\n   ```python\n   def do_GET(self):\n       if self.path == '/hello':\n           content = '<h1>Hello, Visitor!</h1>'\n       elif self.path == '/time':\n           now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n           content = f'<p>Current server time: {now}</p>'\n       else:\n           self.send_response(404)\n           self.send_header('Content-type', 'text/html')\n           self.end_headers()\n           self.wfile.write(b'<h1>404 Not Found</h1>')\n           return\n       self.send_response(200)\n       self.send_header('Content-type', 'text/html')\n       self.end_headers()\n       self.wfile.write(content.encode())\n   ```\n3. Restart the server and visit `/hello` and `/time` in your browser.\n\nYou now have basic routing and can serve dynamic content.",
      "exercises": [
        "Add a `/date` route that returns only the current date.",
        "Parse query parameters (e.g., `/hello?name=Alice`) and personalize the greeting.",
        "Serve a JSON response at route `/api/data`.",
        "Experiment with other status codes like 301 redirects."
      ],
      "resources": [
        {
          "title": "urllib.parse — Parsing URLs",
          "link": "https://docs.python.org/3/library/urllib.parse.html"
        },
        {
          "title": "Working with Dates and Times in Python",
          "link": "https://docs.python.org/3/library/datetime.html"
        }
      ]
    }
  ]
}"

## 2nd Prompt (After Some Changes)
{
    "id": "chatcmpl-BznD9oTh9Ji8t5AeeRPiuq1EJYQhr",
    "object": "chat.completion",
    "created": 1754066875,
    "model": "o4-mini-2025-04-16",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": <see_below>,
                "refusal": null,
                "annotations": []
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 3083,
        "completion_tokens": 4117,
        "total_tokens": 7200,
        "prompt_tokens_details": {
            "cached_tokens": 0,
            "audio_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 1216,
            "audio_tokens": 0,
            "accepted_prediction_tokens": 0,
            "rejected_prediction_tokens": 0
        }
    },
    "service_tier": "default",
    "system_fingerprint": null
}

## Output Course
{\n  \"title\": \"Introduction to C# Programming\",\n  \"chapters\": [\n    {\n      \"title\": \"Setting Up Your C# Development Environment\",\n      \"description\": \"Install the .NET SDK and a code editor so you can write and run C# applications.\",\n      \"body\": \"### Installing the .NET SDK\\n\\nOpen your browser and go to https://dotnet.microsoft.com/download. Download the latest .NET SDK installer for your operating system and run the installer by following the on-screen instructions.\\n\\n### Verifying the Installation\\n\\nOpen a terminal or command prompt and enter:\\n\\n```bash\\ndotnet --version\\n```\\n\\nThe output shows the installed .NET SDK version. If you see a version number, the SDK is ready to use.\\n\\n### Setting Up a Project Folder\\n\\nNavigate to a directory where you want to store your C# projects. Create a new folder named `MyFirstCSharpApp` and change into it:\\n\\n```bash\\nmkdir MyFirstCSharpApp\\ncd MyFirstCSharpApp\\n```\\n\\n### Installing Visual Studio Code (Optional)\\n\\nIf you don’t have a code editor, download Visual Studio Code from https://code.visualstudio.com. After installation, open the project folder in VS Code to start coding.\\n\\n### Creating Your First Project\\n\\nIn the terminal inside your project folder, run:\\n\\n```bash\\ndotnet new console\\n```\\n\\nThis command scaffolds a new C# console application with a sample `Program.cs` file.\\n\\n### Running the Sample Application\\n\\nTo run the generated project, execute:\\n\\n```bash\\ndotnet run\\n```\\n\\nYou should see the message “Hello, World!” printed in the terminal. Your environment is now fully set up for C# development.\",\n      \"exercises\": [\n        \"Install the .NET SDK on your machine.\",\n        \"Verify the installation by running `dotnet --version`.\",\n        \"Create a new folder named `MyFirstCSharpApp` and navigate into it.\",\n        \"Generate a console project with `dotnet new console`.\",\n        \"Run the sample application using `dotnet run`.\"\n      ],\n      \"resources\": [\n        {\n          \"title\": \".NET SDK Download\",\n          \"link\": \"https://dotnet.microsoft.com/download\"\n        },\n        {\n          \"title\": \"Visual Studio Code\",\n          \"link\": \"https://code.visualstudio.com\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Variables and Data Types in C#\",\n      \"description\": \"Learn how to declare variables and work with basic data types in C#.\",\n      \"body\": \"### Opening Your Project in an Editor\\n\\nOpen the `MyFirstCSharpApp` folder in your code editor. Locate the `Program.cs` file created in the previous chapter.\\n\\n### Declaring Variables\\n\\nInside the `Main` method replace the existing code with variable declarations:\\n\\n```csharp\\nint age = 30;\\nstring name = \\\"Alice\\\";\\nbool isMember = true;\\n```\\n\\nHere, `int` holds whole numbers, `string` holds text, and `bool` holds true/false values.\\n\\n### Printing Values to the Console\\n\\nAdd `Console.WriteLine` statements below the declarations:\\n\\n```csharp\\nConsole.WriteLine(\\\"Name: \\\" + name);\\nConsole.WriteLine(\\\"Age: \\\" + age);\\nConsole.WriteLine(\\\"Member status: \\\" + isMember);\\n```\\n\\nEach call to `Console.WriteLine` outputs a line of text. The `+` operator concatenates strings and variables.\\n\\n### Experimenting with Other Data Types\\n\\nDeclare a `double` for fractional numbers and a `char` for a single character:\\n\\n```csharp\\ndouble price = 19.99;\\nchar grade = 'A';\\nConsole.WriteLine($\\\"Price: {price}, Grade: {grade}\\\");\\n```\\n\\nThe `$\\\"...\\\"` syntax allows embedding variables directly inside the string.\\n\\n### Running the Updated Application\\n\\nSave your changes and run:\\n\\n```bash\\ndotnet run\\n```\\n\\nObserve the console output displaying all variable values.\",\n      \"exercises\": [\n        \"Declare an `int`, `double`, `string`, `char`, and `bool` variable and print each one.\",\n        \"Use string interpolation to combine text and variables in a single `Console.WriteLine` call.\",\n        \"Change the value of an existing variable and rerun the application.\",\n        \"Try declaring a `float` and observe any differences when printing it.\",\n        \"Experiment with combining arithmetic operations inside `Console.WriteLine`.\"\n      ],\n      \"resources\": [\n        {\n          \"title\": \"C# Variables and Data Types\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/programming-guide/types/\"\n        },\n        {\n          \"title\": \"String Interpolation in C#\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/language-reference/tokens/interpolated\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Control Flow: Conditionals and Loops\",\n      \"description\": \"Use `if` statements, `switch` cases, and loops to control the execution flow of your program.\",\n      \"body\": \"### Adding an If Statement\\n\\nIn `Program.cs`, after your variable declarations insert an `if` statement to check membership:\\n\\n```csharp\\nif (isMember)\\n{\\n    Console.WriteLine(\\\"Welcome back, \\\" + name + \\\"!\\\");\\n}\\nelse\\n{\\n    Console.WriteLine(\\\"Please sign up to become a member.\\\");\\n}\\n```\\n\\nThis code runs one branch or the other based on the value of `isMember`.\\n\\n### Using a Switch Statement\\n\\nBelow your `if` block add a `switch` on a `char` grade:\\n\\n```csharp\\nswitch (grade)\\n{\\n    case 'A':\\n        Console.WriteLine(\\\"Excellent\\\");\\n        break;\\n    case 'B':\\n        Console.WriteLine(\\\"Good job\\\");\\n        break;\\n    default:\\n        Console.WriteLine(\\\"Keep practicing\\\");\\n        break;\\n}\\n```\\n\\nEach `case` handles a specific value of `grade`, with `default` as a fallback.\\n\\n### Writing a For Loop\\n\\nAdd a loop to count from 1 to 5:\\n\\n```csharp\\nfor (int i = 1; i <= 5; i++)\\n{\\n    Console.WriteLine(\\\"Count: \\\" + i);\\n}\\n```\\n\\nThe loop initializes `i`, checks the condition before each iteration, and increments `i` automatically.\\n\\n### Writing a While Loop\\n\\nUnderneath, implement a `while` loop:\\n\\n```csharp\\nint counter = 3;\\nwhile (counter > 0)\\n{\\n    Console.WriteLine(\\\"Countdown: \\\" + counter);\\n    counter--;\\n}\\n```\\n\\nThis loop runs as long as `counter` remains greater than zero, decrementing each time.\\n\\n### Running the Flow-Control Program\\n\\nExecute:\\n\\n```bash\\ndotnet run\\n```\\n\\nObserve messages from the `if`/`else`, the `switch`, and both loops running in sequence.\",\n      \"exercises\": [\n        \"Write an `if` statement that checks if a number is even or odd.\",\n        \"Create a `switch` that prints the month name given its numeric value.\",\n        \"Use a `for` loop to print the first 10 multiples of a chosen number.\",\n        \"Implement a `while` loop that stops when the user enters a specific keyword.\",\n        \"Combine `if` and loops to print only positive numbers from an array.\"\n      ],\n      \"resources\": [\n        {\n          \"title\": \"C# Conditional Statements\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/language-reference/statements/selection-statements\"\n        },\n        {\n          \"title\": \"C# Loops\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/language-reference/statements/iteration-statements\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Methods and Parameters in C#\",\n      \"description\": \"Learn how to define reusable methods, pass parameters, and return values.\",\n      \"body\": \"### Defining a Simple Method\\n\\nAbove the `Main` method in `Program.cs`, add a new method:\\n\\n```csharp\\nstatic void GreetUser(string userName)\\n{\\n    Console.WriteLine(\\\"Hello, \\\" + userName + \\\"! Welcome to C#.\\\");\\n}\\n```\\n\\nThe `static` modifier lets `Main` call this method directly. The method takes a `string` parameter and returns nothing (`void`).\\n\\n### Calling the Method from Main\\n\\nInside `Main`, replace the membership message with a call to `GreetUser`:\\n\\n```csharp\\nGreetUser(name);\\n```\\n\\nThis passes the variable `name` into the method, which prints a personalized greeting.\\n\\n### Creating a Method with Return Value\\n\\nAdd another method that adds two numbers:\\n\\n```csharp\\nstatic int Add(int a, int b)\\n{\\n    return a + b;\\n}\\n```\\n\\nThis method returns the sum of `a` and `b` as an `int`.\\n\\n### Using the Return Value\\n\\nBack in `Main`, call `Add` and capture its result:\\n\\n```csharp\\nint sum = Add(5, 7);\\nConsole.WriteLine(\\\"Sum is: \\\" + sum);\\n```\\n\\nNow you see how to handle returned data from a method.\\n\\n### Running Your Methods\\n\\nSave and run:\\n\\n```bash\\ndotnet run\\n```\\n\\nVerify that both `GreetUser` and `Add` messages appear in the console.\",\n      \"exercises\": [\n        \"Create a method that multiplies two `double` values and returns the result.\",\n        \"Write a method that checks if a string is a palindrome and returns `bool`.\",\n        \"Overload the `Add` method to handle three `int` parameters.\",\n        \"Call your new methods from `Main` and print their results.\",\n        \"Refactor an existing code block into its own method.\"\n      ],\n      \"resources\": [\n        {\n          \"title\": \"C# Methods\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/methods\"\n        },\n        {\n          \"title\": \"Passing Parameters in C#\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Building Your First Console Application\",\n      \"description\": \"Combine everything you've learned to build a simple interactive console program.\",\n      \"body\": \"### Designing the Application\\n\\nDecide on a small console program such as a basic calculator or a quiz. You will use variables, conditionals, loops, and methods.\\n\\n### Implementing a Menu System\\n\\nInside `Main`, write a loop that displays options:\\n\\n```csharp\\nbool exit = false;\\nwhile (!exit)\\n{\\n    Console.WriteLine(\\\"Choose an option:\\\");\\n    Console.WriteLine(\\\"1. Add numbers\\\");\\n    Console.WriteLine(\\\"2. Greet user\\\");\\n    Console.WriteLine(\\\"3. Exit\\\");\\n    string choice = Console.ReadLine();\\n\\n    switch (choice)\\n    {\\n        case \\\"1\\\":\\n            Console.WriteLine(\\\"Sum: \\\" + Add(3, 4));\\n            break;\\n        case \\\"2\\\":\\n            GreetUser(\\\"Developer\\\");\\n            break;\\n        case \\\"3\\\":\\n            exit = true;\\n            break;\\n        default:\\n            Console.WriteLine(\\\"Invalid choice\\\");\\n            break;\\n    }\\n}\\n```\\n\\nThis code uses a `while` loop and `switch` to handle user input repeatedly.\\n\\n### Refactoring into Methods\\n\\nExtract the menu logic into its own method:\\n\\n```csharp\\nstatic void ShowMenu()\\n{\\n    // menu code here\\n}\\n```\\n\\nCalling `ShowMenu()` from `Main` makes the code cleaner and easier to maintain.\\n\\n### Running and Testing\\n\\nSave all changes and run your application:\\n\\n```bash\\ndotnet run\\n```\\n\\nInteract with each option to verify that your calculator and greeting features work correctly.\",\n      \"exercises\": [\n        \"Extend the menu with a subtraction option using a new method.\",\n        \"Add input validation so non-numeric entries do not crash the program.\",\n        \"Implement a loop that tallies user selections and displays a summary on exit.\",\n        \"Create a quiz with three questions and score the user's answers.\",\n        \"Refactor repeated code into reusable methods.\"\n      ],\n      \"resources\": [\n        {\n          \"title\": \"Building Console Applications\",\n          \"link\": \"https://docs.microsoft.com/dotnet/core/tutorials/with-visual-studio-code\"\n        },\n        {\n          \"title\": \"Organizing C# Code with Methods\",\n          \"link\": \"https://docs.microsoft.com/dotnet/csharp/fundamentals/program-structure\"\n        }\n      ]\n    }\n  ]\n}

## 3rd Prompt (After some changes)
{
    "id": "chatcmpl-Bzo2NNtAPW9ArwTsHiqoOgRRfrUjD",
    "object": "chat.completion",
    "created": 1754070051,
    "model": "o4-mini-2025-04-16",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "",
                "refusal": null,
                "annotations": []
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 3168,
        "completion_tokens": 6450,
        "total_tokens": 9618,
        "prompt_tokens_details": {
            "cached_tokens": 0,
            "audio_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 4480,
            "audio_tokens": 0,
            "accepted_prediction_tokens": 0,
            "rejected_prediction_tokens": 0
        }
    },
    "service_tier": "default",
    "system_fingerprint": null
}

### Output Course
{\"title\":\"Beginner's Guide to C# Programming\",\"chapters\":[{\"title\":\"Setting Up Your C# Development Environment\",\"description\":\"Install the .NET SDK and create your first C# console application to ensure your environment is ready for coding.\",\"body\":\"### Installing the .NET SDK\\n\\nOpen your web browser and go to the official .NET download page. Download the recommended SDK installer for your operating system and run it following the on-screen instructions.\\n\\n### Creating a New Console Project\\n\\nLaunch a terminal or command prompt. Navigate to the folder where you want to store your projects and run `dotnet new console -o HelloWorldApp` to create a new console application named HelloWorldApp.\\n\\n### Running Your First Application\\n\\nChange into the project directory with `cd HelloWorldApp`. Execute `dotnet run` to build and run the application. You should see the message \\\"Hello, World!\\\" printed in the terminal.\\n\\n### Exploring the Default Code\\n\\nOpen the file Program.cs in your editor. Notice the using directive for System, the Program class, and the static Main method that calls `Console.WriteLine`. This is the entry point of your C# application.\",\"exercises\":[\"Install the .NET SDK on your machine following the on-screen instructions.\",\"Create a new console project named HelloWorldApp using the command line.\",\"Modify the default message in Program.cs to display your own name.\",\"Run the application and verify that your custom message appears in the terminal.\",\"Bonus: Use Visual Studio or Visual Studio Code IDE to create and run the HelloWorldApp project.\"],\"resources\":[{\"title\":\"Download .NET SDK\",\"link\":\"https://dotnet.microsoft.com/download\"},{\"title\":\"Official .NET Documentation\",\"link\":\"https://docs.microsoft.com/dotnet/\"}]},{\"title\":\"Understanding Variables and Data Types\",\"description\":\"Learn to declare variables of different data types in C# and perform simple operations.\",\"body\":\"### Declaring Variables\\n\\nVariables in C# act as containers for data. Declare an integer with `int number = 10;`, a string with `string name = \\\"Alice\\\";`, and a boolean with `bool isActive = true;`.\\n\\n### Displaying Variables\\n\\nUse `Console.WriteLine` to output variable values. For example, `Console.WriteLine($\\\"Name: {name}\\\");` prints the content of the name variable.\\n\\n### Performing Arithmetic Operations\\n\\nCombine numeric variables with operators. If you write `int sum = number + 5;` and then `Console.WriteLine(sum);`, the program calculates and displays the result of the addition.\\n\\n### Working with Strings\\n\\nConcatenate strings using the `+` operator or string interpolation. Writing `string greeting = \\\"Hello, \\\" + name;` or `string interpolated = $\\\"Hello, {name}\\\";` produces a greeting message.\",\"exercises\":[\"Declare a double variable with a decimal value and print it to the console.\",\"Create two int variables, compute their product, and display the result.\",\"Convert an int to a string and concatenate it with another string in a message.\",\"Evaluate a boolean expression (e.g., number > 5) and print the outcome.\",\"Bonus: Use the `var` keyword to declare a variable without explicitly specifying its type.\"],\"resources\":[{\"title\":\"C# Data Types\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/tour-of-csharp/types\"},{\"title\":\"String Interpolation in C#\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/language-reference/tokens/interpolated\"}]},{\"title\":\"Control Flow: Decisions and Loops\",\"description\":\"Use conditional statements and loops to control the flow of your C# programs.\",\"body\":\"### Writing If-Else Statements\\n\\nUse `if (number > 0)` to check a condition and execute code when it’s true. Follow it with an `else` block to handle the false case. For example, print different messages based on whether a number is positive or negative.\\n\\n### Implementing a Switch Statement\\n\\nUse a `switch` to compare a variable against multiple values. With `switch (choice)`, define `case` blocks for each value and use `break` to exit each case.\\n\\n### Using While Loops\\n\\nA `while` loop repeats code as long as a condition is true. For instance, initialize `int counter = 0;` and write `while (counter < 5) { Console.WriteLine(counter); counter++; }` to print numbers 0 through 4.\\n\\n### Using For Loops\\n\\nA `for` loop combines initialization, condition, and iteration in one line. Write `for (int i = 0; i < 3; i++) { Console.WriteLine(i); }` to display numbers 0, 1, and 2.\",\"exercises\":[\"Write an if-else block to determine and print if a number is even or odd.\",\"Create a switch statement that prints a different response based on a string variable’s value.\",\"Implement a while loop to count down from 10 to 1 and display each number.\",\"Use a for loop to iterate over an array of strings and print each element.\",\"Bonus: Build a do-while loop that repeatedly prompts the user for a password until it matches a predefined value.\"],\"resources\":[{\"title\":\"C# Conditional Statements\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/language-reference/statements/selection-statements\"},{\"title\":\"C# Looping Constructs\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/programming-guide/statements-expressions-operators/iteration-statements\"}]},{\"title\":\"Defining and Using Methods\",\"description\":\"Create reusable methods in C#, pass parameters, and return values to structure your code effectively.\",\"body\":\"### Creating a Simple Method\\n\\nDefine a method outside of Main. For example, `static int Add(int a, int b) { return a + b; }` computes a sum when called.\\n\\n### Passing Parameters to Methods\\n\\nInclude parameters in your methods. A greeting method can look like `static void Greet(string name) { Console.WriteLine($\\\"Hello, {name}!\\\"); }`.\\n\\n### Returning Values from Methods\\n\\nMethods can return values of any type. If you write `static string GetWelcomeMessage() { return \\\"Welcome to C#!\\\"; }`, you can store its return in a string variable.\\n\\n### Method Overloading\\n\\nDefine multiple methods with the same name but different parameter types or counts. For instance, create `Add(int, int)` and `Add(double, double)` to handle both integer and floating-point additions.\",\"exercises\":[\"Write a method that calculates the square of an integer and returns the result.\",\"Create a method that takes a string and returns its length.\",\"Overload the square method to accept and return a floating-point number.\",\"Call your methods from Main and display their outputs in the console.\",\"Bonus: Implement a recursive method to compute the factorial of a number.\"],\"resources\":[{\"title\":\"C# Methods Documentation\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/methods\"},{\"title\":\"Method Overloading in C#\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/methods#method-overloading\"}]},{\"title\":\"Introduction to Object-Oriented Programming in C#\",\"description\":\"Learn the basics of classes and objects in C# to start writing object-oriented code.\",\"body\":\"### Defining a Class\\n\\nCreate a class to represent real-world entities. For example:\\n```csharp\\nclass Person\\n{\\n    public string Name;\\n    public int Age;\\n}\\n```\\nThis defines a Person with Name and Age fields.\\n\\n### Creating Objects\\n\\nInstantiate your class in Main by writing `Person p = new Person();`. Then assign values: `p.Name = \\\"Alice\\\";` and `p.Age = 30;`.\\n\\n### Adding Methods to Classes\\n\\nInclude behavior in your class. Add a method:\\n```csharp\\npublic void Introduce()\\n{\\n    Console.WriteLine($\\\"Hello, I'm {Name} and I'm {Age} years old.\\\");\\n}\\n```\\nCall `p.Introduce();` to see the message.\\n\\n### Constructors\\n\\nProvide an easy way to initialize objects. Define:\\n```csharp\\npublic Person(string name, int age)\\n{\\n    Name = name;\\n    Age = age;\\n}\\n```\\nNow create an instance with `new Person(\\\"Bob\\\", 25)` and the fields are set automatically.\",\"exercises\":[\"Define a class Car with properties Make and Model and a method DisplayInfo that prints both.\",\"Instantiate a Car object in Main, set its properties, and call DisplayInfo.\",\"Add a constructor to Car that accepts Make and Model and use it to create a new Car instance.\",\"Create a list of Car objects and loop through it to display information for each car.\",\"Bonus: Implement inheritance by creating an ElectricCar class that extends Car and adds a BatteryCapacity property.\"],\"resources\":[{\"title\":\"Classes and Objects in C#\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/fundamentals/types/classes\"},{\"title\":\"Constructors in C#\",\"link\":\"https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/constructors\"}]}]}